// If a # sign appear after a production rule, it means that the word after it is
// the name of the specific AST class that should be created when this production is reduced.
// If no AST specified, it means no new AST should be created, just pass on the AST already
// created for the right-hand-side of that production.
// Note:
// 1. Empty productions are not allowed.
// 2. Some terminals aren't literal but the tokens returned by a lexer (like ID, NUM)


//---------------------------------------------------------------------
// Statements
//---------------------------------------------------------------------
STATEMENTS  ->  STATEMENT                           #  Statements
STATEMENTS  ->  STATEMENT STATEMENTS                #  Statements
STATEMENTS  ->  STATEMENT ; STATEMENTS              #  Statements
STATEMENT   ->  ID = EXP                            #  Assignment
STATEMENT   ->  ID ?= EXP                           #  Assignment
STATEMENT   ->  BLOCK                               #  Statements
BLOCK       ->  { STATEMENTS }                      #  Statements
STATEMENT   ->  if EXP STATEMENT                    #  If
STATEMENT   ->  if EXP STATEMENT else STATEMENT     #  IfElse
STATEMENT   ->  while EXP STATEMENT                 #  While
STATEMENT   ->  repeat EXP times STATEMENT          #  Repeat
STATEMENT   ->  break                               #  Break
STATEMENT   ->  continue                            #  Continue

    
//---------------------------------------------------------------------
// Expressions
//---------------------------------------------------------------------
EXP  ->  NUM                #  Num
EXP  ->  BOOL               #  Bool
EXP  ->  STRING             #  String
EXP  ->  ID                 #  Var
EXP  ->  ( EXP )            
EXP  ->  EXP + EXP          #  Bop
EXP  ->  EXP - EXP          #  Bop
EXP  ->  EXP * EXP          #  Bop
EXP  ->  EXP / EXP          #  Bop
EXP  ->  EXP % EXP          #  Bop 
EXP  ->  EXP == EXP         #  Bop  
EXP  ->  EXP != EXP         #  Bop
EXP  ->  EXP < EXP          #  Bop
EXP  ->  EXP > EXP          #  Bop
EXP  ->  EXP <= EXP         #  Bop
EXP  ->  EXP >= EXP         #  Bop
EXP  ->  EXP ~ EXP          #  Bop
EXP  ->  EXP !~ EXP         #  Bop
EXP  ->  EXP or EXP         #  Bop
EXP  ->  EXP and EXP        #  Bop
EXP  ->  not EXP            #  Uop
EXP  ->  EXP ? EXP : EXP    #  CondExp
